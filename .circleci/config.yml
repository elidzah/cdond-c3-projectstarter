version: 2.1

parameters:
  projectname:
    type: string
    default: udaproject

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [run-migrations]
########################################

      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

orbs:
  slack: circleci/slack@4.1.3
  aws-cli: circleci/aws-cli@0.1.13

commands:
  destroy-environment-onfail:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      cfname:
        default: "none"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.cfname>>"
# aws cloudformation delete-stack --stack-name "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
# aws cloudformation delete-stack --stack-name "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: add tar and gzip tool
          command: yum install -y tar gzip
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y update
            sudo apt-get -y install software-properties-common
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: add tar tool
          command: yum install -y tar
      - run:
          name: add gzip tool
          command: yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=<<pipeline.parameters.projectname>> \
              --stack-name "be-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=<<pipeline.parameters.projectname>> \
              --stack-name "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/
      # Here's where you will add some code to rollback on failure
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package.json" }}
      - run:
          name: installing npm and dependencies
          command: |
            cd frontend
            sudo npm install -g npm@5
            sudo npm i
            sudo npm i oauth-sign
            npm -v
      - run:
          name: build project
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "frontend/package.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package.json" }}
      - run:
          name: update-npm
          command: |
            cd backend
            sudo npm install -g npm@5
            sudo npm i
            sudo npm i oauth-sign
      - run:
          name: Back-end build
          command: |
            cd backend
            sudo npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "backend/package.json" }}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package.json" }}
            - frontend-build-
      # Your job code here
      - run:
          name: frontend test
          command: |
            cd frontend
            ls -lart
            npm run test
      # - run:
      #     name: code-coverage
      #     command: './frontend/node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts:
          path: frontend/test-results.xml
          prefix: tests
      - store_artifacts:
          path: frontend/coverage
          prefix: coverage
      - store_test_results:
          path: frontend/test-results.xml

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package.json" }}
            - backend-build-
      # Your job code here
      - run:
          name: Backend tests
          command: |
            cd backend
            npm run test
      # - run:
      #     name: code-coverage
      #     command: './backend/node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts:
          path: backend/test-results.xml
          prefix: tests
      - store_artifacts:
          path: backend/coverage
          prefix: coverage
      - store_test_results:
          path: backend/test-results.xml

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # restore from cache
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package.json" }}
            - frontend-build-
      # Your job code here
      - run:
          name: reinstalling npm and oauth-sigh
          command: |
            cd frontend
            sudo npm i
            sudo npm i oauth-sign
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package.json" }}
            - backend-build-
      # Your job code here
      - run:
          name: Backend SCAN
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@DevOps-team'
          template: basic_fail_1

#python:3.7-alpine3.11
  configure-infrastructure:
    docker:
      - image: cimg/base:2021.01
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          become: true
          command: |
            sudo apt-get -y update
            sudo apt-get -y install software-properties-common
            sudo apt-get -y install ansible
            sudo apt-get -y install python3-venv python-is-python3
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["f0:c2:1b:03:ba:ff:3e:9d:91:82:eb:c5:c1:c7:17:9b"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: configure the server user
          no_output_timeout: 30m
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt --extra-vars "env=production conn=${TYPEORM_CONNECTION} entities=${TYPEORM_ENTITIES} dbhost=${TYPEORM_HOST} dbport=${TYPEORM_PORT} dbuser=${TYPEORM_USERNAME} dbpwd=${TYPEORM_PASSWORD} database=${TYPEORM_DATABASE}"
      # Here's where you will add some code to rollback on failure
      - aws-cli/install
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"

  print_workspace:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/project/.circleci/ansible/inventory.txt
      - run:
          name: verify workspace files
          become: true
          command: |
            pwd
            ls -lart .circleci/ansible/
            ls -lart .circleci/ansible/inventory.txt

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:9.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          become: true
          command: |
            cd backend
            npm install
            npm run migrations > backend/src/migrations/migrationResults.txt
      - run:
          name: Send migration results to memstash
          command: |
            if [ $(cat backend/src/migrations/migrationResults.txt | grep "has been executed successfully" | wc -l) = 3 ]
            then
            curl -H "Content-Type: text/plain" -H "token: 790263bd-4df2-4649-b0b4-96321cdce047" --request PUT --data "successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
            curl -H "Content-Type: text/plain" -H "token: 790263bd-4df2-4649-b0b4-96321cdce047" --request PUT --data "error" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            exit 1
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"
#curl -H "token: 790263bd-4df2-4649-b0b4-96321cdce047" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#exit 1



#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

