version: 2.1

parameters:
  projectname:
    type: string
    default: udaproject

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [run-migrations]
      - deploy-backend:
         requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

orbs:
  slack: circleci/slack@4.1.3
  aws-cli: circleci/aws-cli@0.1.13

commands:
  destroy-environment-onfail:
    description: Destroy back-end and front-end cloudformation stacks given a workflowID.
    parameters:
      # Add parameter here
      cfname:
        default: "none"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.cfname>>"

  empty-bucket-onfail:
    description: remove objects from the bucket if exist
    steps:
      - run:
          name: emptying bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive

  install-dependencies-onbase:
    description: Install dependencies on base docker image
    parameters:
      withnode:
        default: "no"
        type: string
    steps:
      - run:
          name: executing updates also for ansible and python3
          command: |
            sudo apt-get -y update
            sudo apt-get -y install software-properties-common
            sudo apt-get -y install ansible curl
            sudo apt-get -y install python3-venv python-is-python3
            if [[ << parameters.withnode >> == "yes" ]]
            then
              sudo apt-get -y install nodejs npm
            fi

  install-dependencies-awscli:
    description: Install dependencies on aws-cli docker image
    parameters:
      extended:
        default: "no"
        type: string
    steps:
      - run:
          name: add tar and gzip sudo and node tool
          become: true
          command: |
            yum install -y tar gzip sudo
            curl â€“sL https://rpm.nodesource.com/setup_10.x | sudo -E bash -
            if [[ << parameters.extended >> == "yes" ]]
            then
              sudo yum -y install nodejs
            fi

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when:
            on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 790263bd-4df2-4649-b0b4-96321cdce047" --request GET "https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}" | grep "successful" | wc -l)
            if(( $SUCCESS==1 ));
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

#norollback
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-
      - run:
          name: installing npm and dependencies
          command: |
            cd frontend
            sudo npm install -g npm@5
            sudo npm i
            sudo npm i oauth-sign
            npm -v
      - run:
          name: build project
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
#norollback
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-
      - run:
          name: update-npm
          command: |
            cd backend
            sudo npm install -g npm@5
            sudo npm i
            sudo npm i oauth-sign
      - run:
          name: Back-end build
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION="${TYPEORM_CONNECTION}" >> "backend/.env"
            echo TYPEORM_ENTITIES="${TYPEORM_ENTITIES}" >> "backend/.env"
            echo TYPEORM_HOST="${TYPEORM_HOST}" >> "backend/.env"
            echo TYPEORM_PORT="${TYPEORM_PORT}" >> "backend/.env"
            echo TYPEORM_USERNAME="${TYPEORM_USERNAME}" >> "backend/.env"
            echo TYPEORM_PASSWORD="${TYPEORM_PASSWORD}" >> "backend/.env"
            echo TYPEORM_DATABASE="${TYPEORM_DATABASE}" >> "backend/.env"
            cd backend
            sudo npm run build
            ls -lart
            ls -lart dist
      - save_cache:
          paths:
            - backend
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}

#norollback - circleci/node:13.8.0
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build-
      # Your job code here
      - run:
          name: frontend test
          command: |
            cd frontend
            ls -lart
            npm run test
      # - run:
      #     name: code-coverage
      #     command: './frontend/node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts:
          path: frontend/test-results.xml
          prefix: tests
      - store_artifacts:
          path: frontend/coverage
          prefix: coverage
      - store_test_results:
          path: frontend/test-results.xml
#norollback - circleci/node:13.8.0
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build-
      # Your job code here
      - run:
          name: Backend tests
          command: |
            cd backend
            npm run test
      # - run:
      #     name: code-coverage
      #     command: './backend/node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts:
          path: backend/test-results.xml
          prefix: tests
      - store_artifacts:
          path: backend/coverage
          prefix: coverage
      - store_test_results:
          path: backend/test-results.xml
#norollback
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # restore from cache
      - restore_cache:
          keys:
            - frontend-build-
      # Your job code here
      - run:
          name: reinstalling npm and oauth-sigh
          command: |
            cd frontend
            sudo npm i
            sudo npm i oauth-sign
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install --save-dev webpack@5.26.0 jest@26.6.3 html-webpack-plugin@5.3.1 webpack-dev-server@3.11.2 axios@0.21.1 html-loader@2.1.2 ts-jest@26.5.3
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
#norollback
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build-
      # Your job code here
      - run:
          name: Backend SCAN
          command: |
            cd backend
            npm install --save-dev nodemon@2.0.7 ts-jest@26.5.3 jest@26.6.3 @nestjs/common@7.6.14 standard-version@9.1.1 @nestjs/swagger@4.7.16
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@DevOps-team'
          template: basic_fail_1

# with rollback - amazon/aws-cli with persistance
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-awscli

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=<<pipeline.parameters.projectname>> \
              --stack-name "be-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              #exit 1
              #exit 2
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=<<pipeline.parameters.projectname>> \
              --stack-name "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/
      - save_cache:
          paths:
            - .circleci/ansible/inventory.txt
          key: infra_info-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"

#with rollback - cimg/base:2021.01
  configure-infrastructure:
    docker:
      - image: cimg/base:2021.01
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-onbase
      - aws-cli/install
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["f0:c2:1b:03:ba:ff:3e:9d:91:82:eb:c5:c1:c7:17:9b"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: configure the server user
          no_output_timeout: 30m
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt --extra-vars "env=production conn=${TYPEORM_CONNECTION} entities=${TYPEORM_ENTITIES} dbhost=${TYPEORM_HOST} dbport=${TYPEORM_PORT} dbuser=${TYPEORM_USERNAME} dbpwd=${TYPEORM_PASSWORD} database=${TYPEORM_DATABASE}"
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"

# With rollback - circleci/node:9.11
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:9.11
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/install
      - run:
          name: Run migrations
          become: true
          command: |
            cd backend
            npm install
            npm run migrations > src/migrations/migrationResults.txt
      - run:
          name: Send migration results to memstash
          command: |
            pwd
            ls -lart
            cat backend/src/migrations/migrationResults.txt
            echo "token: 790263bd-4df2-4649-b0b4-96321cdce047 Key: migration_${CIRCLE_WORKFLOW_ID:0:7}"
            if [ $(cat backend/src/migrations/migrationResults.txt | grep "has been executed successfully" | wc -l) = 3 ] || [ $(cat backend/src/migrations/migrationResults.txt | grep "No migrations are pending" | wc -l) > 0 ]
            then
            echo "########### MIGRATION SUCCESS RESULTS ################"
            curl -H "Content-Type: text/plain" -H "token: 790263bd-4df2-4649-b0b4-96321cdce047" --request PUT --data "successful" "https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}"
            else
            echo "########### MIGRATION ERROR RESULTS ################"
            cat backend/src/migrations/migrationResults.txt
            curl -H "Content-Type: text/plain" -H "token: 790263bd-4df2-4649-b0b4-96321cdce047" --request PUT --data "error" "https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}"
            exit 1
            fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"
# With rollback - cimg/base:2021.01
  deploy-backend:
    docker:
      - image: cimg/base:2021.01
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - restore_cache:
          keys:
            #- backend-build-{{ checksum "backend/package.json" }}
            - backend-build
            - infra_info-
      - install-dependencies-onbase
      - aws-cli/install
      - add_ssh_keys:
          fingerprint: ["f0:c2:1b:03:ba:ff:3e:9d:91:82:eb:c5:c1:c7:17:9b"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: configure the server user
          no_output_timeout: 30m
          command: |
            ansible-galaxy collection install ansible.posix
            ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt --verbose --extra-vars "env=production conn=${TYPEORM_CONNECTION} entities=${TYPEORM_ENTITIES} dbhost=${TYPEORM_HOST} dbport=${TYPEORM_PORT} dbuser=${TYPEORM_USERNAME} dbpwd=${TYPEORM_PASSWORD} database=${TYPEORM_DATABASE}"
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - empty-bucket-onfail
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"
# with rollback - amazon/aws-cli
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-awscli:
          extended: "yes"

      - attach_workspace:
          at: .

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -1 .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "### API URL FOUND: ${API_URL}"
            cd frontend
            npm install -g npm@5
            npm i
            npm i oauth-sign
            npm run build

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 sync frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - empty-bucket-onfail
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"

#curl -H "token: 790263bd-4df2-4649-b0b4-96321cdce047" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#exit 1
  print_workspace:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/project/.circleci/ansible/inventory.txt
      - run:
          name: verify workspace files
          become: true
          command: |
            pwd
            ls -lart .circleci/ansible/
            ls -lart .circleci/ansible/inventory.txt

# with rollback - cimg/base:2021.01
  smoke-test:
    docker:
      - image: circleci/node:9.11
    steps:
      - checkout
      - aws-cli/install

      - attach_workspace:
          at: .
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail -1 .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo $API_URL
            curl -s $API_URL
            if [[ $(curl -s $API_URL | grep '"status":"ok"' | wc -l) > 0 ]]
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            echo "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-west-1.amazonaws.com"
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-west-1.amazonaws.com"
            if [[ $(curl -s $URL | grep "Welcome" | wc -l) > 0 ]]
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - empty-bucket-onfail
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-awscli:
          extended: "yes"

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text > .circleci/oldworkflowid.txt
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name udapeople-cloudfront --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/oldworkflowid.txt
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment-onfail:
          cfname: "be-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      - empty-bucket-onfail
      - destroy-environment-onfail:
          cfname: "fe-stack-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - install-dependencies-awscli
      - attach_workspace:
          at: .
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(tail -1 .circleci/oldworkflowid.txt)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --output text))
            echo "Old WorkflowID: ${OldWorkflowID}"

            echo "Stacknames: ${STACKS[@]}"
            echo "found workflow: ${OldWorkflowID}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "BUCKET TO REMOVE ## s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "be-stack-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "fe-stack-${OldWorkflowID}"
            fi
